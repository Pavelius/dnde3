#include "main.h"

static void choose_children(stringbuilder& sb, manual& mn, answeri& an) {
	for(auto& e : bsmeta<manual>()) {
		if(e.parent == mn.value)
			an.add((int)&e, e.getname());
	}
}

static void add_children(stringbuilder& sb, manual& mn, answeri& an) {
	for(auto& e : bsmeta<manual>()) {
		if(e.parent == mn.value) {
			sb.addn("[%1]: ", e.name);
			sb.adds(e.text);
		}
	}
}

static void race_ability(stringbuilder& sb, manual& mn, answeri& an) {
	if(mn.value.type != Race)
		return;
	sb.addn("[Артибуты]: ");
	auto& ei = bsmeta<racei>::elements[mn.value.value];
	for(auto i = Strenght; i <= Charisma; i = ability_s(i+1)) {
		if(i!=Strenght)
			sb.add(", ");
		sb.add("%1i %2", ei.abilities[i-Strenght], getstr(i));
	}
	sb.add(".");
}

static void ability_example(stringbuilder& sb, manual& mn, answeri& an) {
	if(mn.value.type != Ability)
		return;
	sb.addn("[Значения]: ");
	auto count = 0;
	for(auto i = 5; i <= 20; i++) {
		for(auto& e : bsmeta<racei>()) {
			if(e.abilities[mn.value.value] != i)
				continue;
			if(count > 0)
				sb.add(", ");
			sb.add("%1i %-2", i, e.name);
			count++;
			break;
		}
	}
	sb.add(".");
}

static void ability_skills(stringbuilder& sb, manual& mn, answeri& an) {
	skilla source;
	for(auto& e : bsmeta<skilli>()) {
		if(e.abilities[0] == mn.value.value || e.abilities[1] == mn.value.value)
			source.add(e.getid());
	}
	if(!source.count)
		return;
	source.sort();
	sb.addn("[Навыки]: ");
	auto p = sb.get();
	for(auto i : source) {
		if(p[0])
			sb.add(", ");
		sb.add(bsmeta<skilli>::elements[i].name);
	}
	sb.add(".");
}

static manual::proc ability_list[] = {choose_children};
static manual::proc ability_procs[] = {ability_example, ability_skills, add_children};
static manual::proc general_list[] = {choose_children};
static manual::proc manual_list[] = {choose_children};
static manual::proc skill_list[] = {choose_children};
static manual::proc state_list[] = {choose_children};
static manual::proc race_ability_list[] = {race_ability};
manual bsmeta<manual>::elements[] = {{NoVariant, Variant, "Мануал", "Содержит справочную информацию по правилам игры.", manual_list},
{Variant, Ability, "Способности персонажей", "Каждый персонаж имеет [6] базовых способностей, которые его характеризуют.", ability_list},
{Ability, Strenght, 0, "Сила является мерой мускульной силы, физической стойкости и выносливости персонажа. Эта способность является главной для воинов, так как они должны быть сильными, чтобы носить доспехи и владеть тяжелым оружием.", ability_procs},
{Ability, Dexterity, 0, "Ловкость характеризует различные физические особенности персонажа, включая координацию движений, проворство, скорость реакции, рефлексы и вестибулярный аппарат. Ловкость влияет на реакцию персонажа на опасность или неожиданность, на его умение обращаться с метательным оружием и луками, а также на его увертливость от ударов.", ability_procs},
{Ability, Constitution, 0, "Телосложение персонажа характеризует его физические данные, гармоничность комплекции, здоровье и устойчивость к неудобствам, ранениям и заболеваниям.", ability_procs},
{Ability, Intellegence, 0, "Интеллект характеризует память, рассудительность персонажа и его способность к обучению, включая области вне того, что можно выразить печатным словом.", ability_procs},
{Ability, Wisdow, 0, "Мудрость характеризует совокупность просвещенности, рассудительности, силы воли, здравого смысла и интуиции персонажа.", ability_procs},
{Ability, Charisma, 0, "Обаяние характеризует способность персонажа к убеждению, его личную привлекательность и лидерские качества. Это не отражает физической привлекательности, хотя она, разумеется, также играет роль. Обаяние важно для всех персонажей, а особенно для тех, кто собирается иметь дело с неигровыми персонажами, наемными воинами, слугами и разумными животными.", ability_procs},
{Intellegence, 0, "Дополнительный опыт", "Персонаж получает [++1%%] опыта за каждую единицу интеллекта более **10** и [--1%%] опыта за каждую единицу интеллекта менее 10."},
{Intellegence, 0, "Повышение навыков", "Персонаж получает **Интллект/2** повышений наввыков на каждом уровне."},
{Intellegence, 0, "Диалоги", "Во время диалога все персонажи добавляют к сложности для сравнения навыка значение **ИнтеллектХ2-20**."},
{Variant, Trap, "Ловушки", "В любом подземелье находится множество ловушек. По-умолчанию все ловушки скрыты и когда герой становится на клетке с ловушкой делается тестирование навыка [Внимательность] c штрафом [--20%%]. Если тест удался герой обнаруживает ловушку и получает немного опыта. Иначе срабатывает эффект ловушки и она становится видимой.\nПри повторном наступании на ловушку также делается тест внимательности, но с бонусом [++15%%]. Если тест удался герой повторно обходит ловушку (опыт, конечно же, снова не получает)."},
{Variant, Skill, "Навыки персонажей", "Каждый персонаж имеет определенное количество навыков. Их число зависит от класса и расы.", skill_list},
{Variant, State, "Состояния персонажей", "Во время приключений персонажи сталкиваются с множетсвом опасностей.", state_list},
{Skill, Acrobatics, 0, "Добавляет [++1%%] к шансу промазать по персонажу за каждые 4 единицы."},
{Skill, Alchemy, 0, "Позволяет определить зелье. Также можно изготавливать зелья по рецептам."},
{Skill, Backstabbing, 0, "Добавляется к шансу попадания и увеличивает урон в процентах равный утроенному навыку, если атака делается из невидимого состояния. После такой атаки вы становитесь видимым."},
{Skill, Riding, 0, "Позволяет передвигаться быстрее на глобальной карте."},
{Skill, FindWeakness, 0, "Шанс попасть в уязвимое место врага и нанести [++30%%] урона, а также в зависимости от типа оружия дополнительный эффект:\n* Колющее оружие причиняет +40%% урона вместо +30%% и игнорирует броню.\n* Режущее оружие заставляет противника истекать кровью\n* Ударное оружие наносит оглушительный удар после которого соперник должен прийти в себя чтобы ходить дальше.\nИз шанса попасть в уязвимое место вычитается покрытость врага броней."},
{Skill, Healing, 0, "Скорость восстановления здоровья персонажа."},
{Skill, Concetration, 0, "Скорость восстановления маны персонажа."},
{Skill, HearNoises, 0, "Шанс услышать движение невидимого врага и сделать его видимым."},
{Skill, MoveSilently, 0, "Шанс двигаться тихо оставаясь незамеченным в невидимом состоянии."},
{Skill, HideInShadow, 0, "Позволяет спрятаться и оставаться незамеченым. Вы просто исчезаете из вида у всех на виду."},
{State, Sick, 0, "Больной персонаж не восстанавливает очки жизни природным путем. При лечение количество восстанавливаемых хитов делится на три."},
{State, Poisoned, 0, "Отравленный персонаж теряет по одному очку жизни каждые 5 минут если не выполнит сопротивление яду. При удачном сопротивлении уменьшается уровень яда."},
{Variant, Race, "Расы", "От выбранной расы зависят стартовые атрибуты к которым добавяется случайный модификатор от [--2] до [++2].", general_list},
{Race, Human, 0, "Люди - самая распространённая раса в Забытых Королевствах. Их главное преимущество перед всеми остальными расами то, что они могут выбрать любой класс и специализацию. В среднем они живут около 70 лет и достигают роста 180 см.", race_ability_list},
{Race, Dwarf, 0, "Дворфы — низкий, коренастый народ, их легко узнать по размеру и осанке. В среднем они от 4 до 4 1/2 футов ростом. У них румяные щёки, тёмные глаза и тёмные волосы. В основном дворфы живут 350 лет. Обычно дворфы угрюмы и неразговорчивы. Они увлекаются тяжёлой работой, их мало заботит юмор. Они сильные и храбрые. Они любят пиво, эль, мёд и более крепкие напитки. Их главная любовь, однако, драгоценный металл, в частности золото. Они ценят самоцветы, особенно алмазы, и непрозрачные камни (кроме жемчужин). Дворфам нравится земля и не нравится море. Они не слишком любят эльфов и испытывают лютую ненависть к оркам и гоблинам. Их низкие коренастые тела не позволяют ездить на лошадях или других крупных ездовых (хотя на пони или кабанах не испытывают трудностей), и они относятся с лёгким подозрением и осторожностью к этим созданиям.Они питают неприязнь к магии и мало способны к ней, но наслаждаются боем, военным искусством и научными ремёслами, такими как инженерное дело.", race_ability_list},
};
DECLFULL(manual);

const char* manual::getname() const {
	if(name)
		return name;
	return value.getname();
}

void gamei::help() {
	adat<manual*, 32> pages;
	auto pm = bsmeta<manual>::elements;
	while(pm) {
		char temp[2048]; stringbuilder sb(temp); answeri an;
		sb.add(pm->text);
		for(auto p : pm->procs)
			p(sb, *pm, an);
		if(pages.getcount() == pages.getmaximum())
			pages.remove(0);
		pages.add(pm);
		pm = (manual*)an.dialogv(true, pm->getname(), sb);
		if(!pm && pages.getcount()>1) {
			pages.remove(pages.getcount() - 1);
			pm = pages[pages.getcount() - 1];
			pages.remove(pages.getcount() - 1);
		}
	}
}